CONST	StateIdle	0
CONST	StateWelcome	1
CONST	StateWelcomeBack	2
CONST	StateMain	10
CONST	StateBye	90
CONST	StateExit	99
CLASS	Counter
	PROP	state
	PROP	stateNext
	PROP	num
	
	METHOD	init
		SET	.state	_StateIdle
		SET	.stateNext	_StateWelcome
		
		SET	.num	0
	/METHOD
	
	METHOD	wake	$state, $hy
		SELECT	.state
			CASE	_StateMain
				SET	.num	$hy
				/CASE
				
			CASE	_StateExit
				SET	$state	_StateWelcomeBack
				/CASE
		/SELECT
		
		SET	.stateNext	$state
		##	CALL	.run
	/METHOD
	
	METHOD	run
		WHILE_NEQ	.state	_StateExit
			CALL	.cycle
		/WHILE
	/METHOD
	
	METHOD	runABit	$cycles
		VAR	i
		SET	$i	$cycles
		WHILE_NEQ	$i	0
			
			CALL	.cycle
			
			DEC	$i
			IF	.state == _StateExit
				SET	$i	0
			/IF
		/WHILE
	/METHOD
	
	METHOD	cycle
		SET	.state	.stateNext
		SET	.stateNext	_StateExit
		
		SELECT	.state
			CASE	_StateIdle
				##	Do nothing
				/CASE
				
			CASE	_StateWelcome
				put	"Welcome to this stateful counting example!"
				SET	.stateNext	_StateMain
				/CASE
			CASE	_StateWelcomeBack
				put	"Welcome back to this stateful counting example!"
				SET	.stateNext	_StateMain
				/CASE
				
			CASE	_StateMain
				SET	.stateNext	_StateMain
				
				INC	.num
				
				putR	"Counting: "
				put	.num
				
				IF	.num > 99
					SET	.num	0
				/IF
				
##				IF	.num <= 20
##					SET	.stateNext	_StateMain
##				ELSE
##					SET	.stateNext	_StateBye
##				/IF
				/CASE
				
			CASE	_StateBye
				put	"Good Bye from counter.hal!"
				SET	.stateNext	_StateExit
				/CASE
		/SELECT
		
		hyber:allowSleep	.stateNext	.num
		
	/METHOD
	
/CLASS