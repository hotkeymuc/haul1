//	"htk_shadow.hal - (C) 2011 Bernhard -HotKey- Slawik, http://www.bernhardslawik.de"
//	"  This is a HAL Translation Kernel that translates HAL to Shadow ByteCode source. Written in HAL (HotKeys Average Language)."


//	Op Codes
CONST	OpNop	0
//	 Set Accumulator to ...
CONST	OpSet	1
//	 Get value of variable no. ...
CONST	OpGetV	2
//	 Set variable no. ... to value ...
CONST	OpSetVTo	3
//	 Set variable no. ... to accumulator
CONST	OpSetVToA	4

//	 Push current accumulator onto stack
CONST	OpPushA	5
//	 Push ... onto stack
CONST	OpPush	6
//	 Push current Code Pointer to stack
CONST	OpPushCp	7
//	 Pop last value and set accumulator to its value
CONST	OpPop	8
//	 Set accumulator to last stack value without popping
CONST	OpPeek	9

//	 If accumulator	...
CONST	OpIfA	10
//	 If accumulator != ...
CONST	OpIfANot	11
CONST	OpIfAGT	12
CONST	OpIfAGE	13
CONST	OpIfALT	14
CONST	OpIfALE	15

//	 Jump to instruction no. ...
CONST	OpJumpTo	20
//	 Jump to the instruction postition stored in accumulator
CONST	OpJumpA	21
//	 Jump to last stack value without popping it
CONST	OpJumpPeek	22
//	 Skip ... instructions
CONST	OpSkip	24
//	 Jump to instruction no. ... and push next offset onto stack (for easy returning). Use it for sub-procedure calls
CONST	OpJumpToAndLink	25
//	 Jump to instruction postition stored in accumulator and push next offset onto stack (for easy returning)
CONST	OpJumpAAndLink	26
//	 Pop last stack value, jump there. Use it to end a sub-procedure call
CONST	OpRet	27

CONST	OpAdd	30
CONST	OpSub	31
CONST	OpInc	32
CONST	OpDec	33
CONST	OpMul	34
CONST	OpDiv	35

CONST	OpOut	100
//	 Output registers & stuff
CONST	OpDebug	101
//	 CALL	external function (@TODO: How to pass arguments and return value?)
CONST	OpInvoke	102
//	 Set mode to Stopped
CONST	OpEnd	255

CONST	PosVar	3


CLASS	HTKshadow	HTK
	##	SET	.name	"shadowBC"
	##	SET	.ext	".shadow"
	PROP	data
	
	PROP	varName	[128]
	PROP	varNames
	PROP	forVar	[8]
	PROP	forVars
	PROP	forEnd	[8]
	PROP	forEnds
	
	METHOD	PushC	$op
		str:appendByte	$op	.data
	/METHOD
	
	METHOD	PushString	$txt
		VAR	l
		str:len	$txt	$l
		str:appendByte	$l	.data
		str:append	$txt	.data
	/METHOD
	
	FUNCTION	deployStart
		SET	.data	""
	/FUNCTION
	
	FUNCTION	resourceStart
	/FUNCTION
	FUNCTION	resourceAdd	$resName, $resData
	/FUNCTION
	FUNCTION	resourceEnd
	/FUNCTION
	
	FUNCTION	translateLibs
	/FUNCTION
	
	FUNCTION	translateStart
		VAR	pose
		SET	$pose	"Hi there, this is htk_vbs.hal! I am running on "
		str:append	_currPlatform	$pose
		str:append	" and about to translate HAL to Shadow ByteCode source!"	$pose
		put	$pose
		
		##	SET	.varNames	_PosVar
		SET	.varNames	0
		SET	.forVars	0
		SET	.forEnds	0
		
		##	CALL	.PushC	_OpNop
	/FUNCTION
	
	FUNCTION	addVar	$nam, $p2
		SET	.varName[.varNames]	$nam
		
##		putR	"addVar: "
##		putR	.varNames
##		putR	" = "
##		put	$nam
		
		INC	.varNames
		RETURN	.varNames
	/FUNCTION
	
	FUNCTION	getVar	$nam
		VAR	i
		FOR	$i	0	.varNames
			IF	.varName[$i] == $nam
##		putR	"getVar: "
##		putR	$i
##		putR	" = "
##		put	$nam
				RETURN	$i
			/IF
		/FOR
		INC	$i
		
		putR	"getVar: "
		putR	$nam
		put	" = UNKNOWN!"
		
		RETURN	$i
	/FUNCTION
	
	##	For FOR
	FUNCTION	pushForVar	$v
		SET	.forVar[.forVars]	$v
		INC	.forVars
	/FUNCTION
	FUNCTION	popForVar
		DEC	.forVars
		RETURN	.forVar[.forVars]
	/FUNCTION
	FUNCTION	pushForEnd	$v
		SET	.forEnd[.forEnds]	$v
		INC	.forEnds
	/FUNCTION
	FUNCTION	popForEnd
		DEC	.forEnds
		RETURN	.forEnd[.forEnds]
	/FUNCTION
	
	FUNCTION	translateExp	$t
		VAR	l
		str:len	$t	$l
		IF	$l == 0
			RETURN	""
		/IF
		
		VAR	b
		str:charCodeAt	$t	0	$b
		IF	$b == 34
			##	str:addSlashes	$t	$t
			str:copy	$t	1	$l-2	$t
			RETURN	$t
		/IF

		RETURN	$t
	/FUNCTION
	
	FUNCTION	translateInstruction	$items, $line, $indents
		array:len	$items	$l
		VAR	p1
		WHILE_EQ	$items[$l-1]	""
			DEC	$l
		/WHILE
		IF	$l == 0
			RETURN	""
		/IF
		
		IF	$l > 1
			RESULT	$p1	.translateExp	$items[1]
		ELSE
			SET	$p1	""
		/IF
		
		VAR	p2
		IF	$l > 2
			RESULT	$p2	.translateExp	$items[2]
		ELSE
			SET	$p2	""
		/IF
		
		VAR	p3
		IF	$l > 3
			RESULT	$p3	.translateExp	$items[3]
		ELSE
			SET	$p3	""
		/IF
		
		VAR	p4
		IF	$l > 4
			RESULT	$p4	.translateExp	$items[4]
		ELSE
			SET	$p4	""
		/IF
		
		VAR	i
		
		SELECT	$items[0]
			//	Meta comment
			CASE	"##"
				/CASE
				
			//	Comment
			CASE	"//"
				/CASE
				
			//	Insert Macro
			CASE	"MACRO"
				##	switch($p1)
				##		default:	write($indent.' ###### UNKNOWN MACRO: '.$p1)
				/CASE
				
			//	Define variable
			CASE	"VAR"
				str:prepend	"$"	$p1
				CALL	.addVar	$p1, $p2
				/CASE
				
			//	Define class variable
			CASE	"PROP"
				str:prepend	"."	$p1
				CALL	.addVar	$p1, $p2
				/CASE
				
			//	Define constant
			CASE	"CONST"
				str:prepend	"_"	$p1
				CALL	.addVar	$p1, $p2
				/CASE
				
			//	Method
			CASE	"METHOD"
				put	"TODO: Implement METHOD"
				/CASE
			CASE	"/METHOD"
				/CASE
				
			//	Function
			CASE	"FUNCTION"
				put	"TODO: Implement FUNCTION"
				/CASE
			CASE	"/FUNCTION"
				/CASE
			CASE	"RETURN"
				##	put	"TODO: Implement RETURN"
				CALL	.PushC	_OpSet
				CALL	.PushC	$p1
				/CASE
			CASE	"RETURN_REF"
				put	"TODO: Implement RETURN_REF"
				/CASE

			//	Set variable
			CASE	"SET"
				RESULT	$i	.getVar	$p1
				CALL	.PushC	_OpSetVTo
				CALL	.PushC	$i
				CALL	.PushC	$p2
				/CASE
			CASE	"SET_REF"
				RESULT	$i	.getVar	$p1
				CALL	.PushC	_OpSetVTo
				CALL	.PushC	$i
				CALL	.PushC	$p2
				/CASE
			//	Increment
			CASE	"INC"
				RESULT	$i	.getVar	$p1
				CALL	.PushC	_OpGetV
				CALL	.PushC	$i
				IF	$p2 != ""
					CALL	.PushC	_OpInc
				ELSE
					CALL	.PushC	_OpAdd
					CALL	.PushC	$i
				/IF
				/CASE
			//	Decrement
			CASE	"DEC"
				RESULT	$i	.getVar	$p1
				CALL	.PushC	_OpGetV
				CALL	.PushC	$i
				IF	$p2 != ""
					CALL	.PushC	_OpDec
				ELSE
					CALL	.PushC	_OpSub
					CALL	.PushC	$i
				/IF
				/CASE
			//	Multiply self by
			CASE	"MUL"
				RESULT	$i	.getVar	$p1
				CALL	.PushC	_OpGetV
				CALL	.PushC	$i
				CALL	.PushC	_OpMul
				CALL	.PushC	$p2
				/CASE
			//	Divide self by
			CASE	"DIV"
				RESULT	$i	.getVar	$p1
				CALL	.PushC	_OpGetV
				CALL	.PushC	$i
				CALL	.PushC	_OpDiv
				CALL	.PushC	$p2
				/CASE
				
			CASE	"IF"
				put	"TODO: Implement IF"
				##	CALL	.PushC	"If "
				##	CALL	.PushC	$p1
				##	CALL	.PushCLn	" Then"
				/CASE
			CASE	"ELSE"
				##	CALL	.PushCLn	"Else"
				/CASE
			CASE	"/IF"
				##	CALL	.PushCLn	"End If"
				/CASE
			CASE	"SELECT"
				put	"TODO: Implement SELECT"
				/CASE
				
			CASE	"WHILE_EQ"
				put	"TODO: Implement WHILE_EQ"
				/CASE
			CASE	"WHILE_NEQ"
				put	"TODO: Implement WHILE_NEQ"
				/CASE
				
			CASE	"FOR"
				VAR	i
				RESULT	$i	.getVar	$p1
				CALL	.PushC	_OpSetVTo
				CALL	.PushC	$i
				CALL	.PushC	$p2
				CALL	.PushC	_OpPushCp
				
				CALL	.pushForVar	$p1
				CALL	.pushForEnd	$p3
				
				/CASE
			##	CASE	"FOR_EACH"
			CASE	"/FOR"
				
				VAR	forVar
				RESULT	$forVar	.popForVar
				VAR	forEnd
				RESULT	$forEnd	.popForEnd
				
				CALL	.PushC	_OpGetV
				CALL	.PushC	$forVar
				
				##	FOR	Increment
				CALL	.PushC	_OpInc
				
				CALL	.PushC	_OpIfALE
				##	FOR	End value
				CALL	.PushC	$forEnd
					##	No. of instructions in "THEN" block
					CALL	.PushC	3
						CALL	.PushC	_OpSetVToA
						CALL	.PushC	$forVar
						CALL	.PushC	_OpJumpPeek
				CALL	.PushC	_OpPop
				/CASE
				
			//	Call a method
			CASE	"CALL"
				CALL	.PushC	$p1
				CALL	.PushC	"("
				CALL	.PushC	$p2
				/CASE
			##	CASE	"CLASS_CALL"
			CASE	"RESULT"
				put	"TODO: Implement RESULT"
				/CASE
			CASE	"END"
				CALL	.PushC	_OpEnd
				/CASE
				
			CASE	"put"
				CALL	.PushC	_OpOut
				CALL	.PushString	$p1
				/CASE
			CASE	"putR"
				CALL	.PushC	_OpOut
				CALL	.PushString	$p1
				/CASE
			
			##	CASE	"str:prepend"
			##	CASE	"str:append"
			##	CASE	"str:appendByte"
			##	CASE	"str:replace"
			##	CASE	"str:char"
			##	CASE	"str:len"
			##	CASE	"str:charCodeAt"
			##	CASE	"str:explode"
			##	CASE	"str:copy"
			##	CASE	"file:putString"
			##	CASE	"file:getString"
			##	CASE	"eval"
			##	CASE	"RETURN_EVAL"
			CASE_ELSE
				put	"Unknown/unimplemented command"
				put	$items[0]
				##	=\"".$items[0]."\", line=\"".$line."\"");
				/CASE
		/SELECT
	/FUNCTION
	FUNCTION	translateEnd
		##	Nothin to do here.
	/FUNCTION
	
	FUNCTION	deployEnd
		RETURN	.data
	/FUNCTION
	
	FUNCTION	run
		VAR	r
		eval	.data	$r
		RETURN_REF	$r
	/FUNCTION
/CLASS


put	"htk_shadow.hal - Loaded."
END